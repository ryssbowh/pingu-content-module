<?php

namespace Pingu\Content;

use Pingu\Content\Entities\Content as ContentModel;
use Pingu\Content\Entities\ContentType;
use Pingu\Content\Entities\Field;
use Pingu\Content\Entities\FieldValue;
use Pingu\Content\Events\ContentCreated;

class Content
{
	protected $permissionCheckers = [];

	/**
	 * Registers a content permission checker
	 * @param  string $checker
	 */
	public function registerPermissionChecker(string $checker)
	{
		$this->permissionCheckers[] = $checker;
	}

	/**
	 * forgets a content permission checker
	 * @param  string $checker
	 */
	public function forgetPermissionChecker(string $checker)
	{
		foreach($this->$permissionCheckers as $index=>$checker2){
			if($checker == $checker2){
				unset($this->permissionCheckers[$index]);
				return;
			}
		}
	}

	/**
	 * Navigates through all the content permission checkers and checks permissions for each
	 * @param  string $action
	 * @param  mixed $args
	 * @return bool
	 */
	public function checkContentPermission(string $action, $args)
	{
		foreach($this->permissionCheckers as $checker){
			$checker = new $checker;
			if(method_exists($checker, $action)){
				$checker->$action(...$args);
			}
		}
	}

	/**
	 * Creates a new content
	 * @param  ContentType $type
	 * @param  array       $values
	 * @return Content
	 */
	public function createContent(ContentType $type, array $values)
	{
		$content = new ContentModel([
            'title' => $values['title'],
            'published' => $values['published']
        ]);
        $content->content_type()->associate($type);
        $content->creator()->associate(\Auth::user());
        $content->save();
        foreach($type->fields as $field){
        	$this->createFieldValue($field, $content, $values[$field->machineName]);
        }
        event(new ContentCreated($content));
        return $content;
	}

	/**
	 * Updates a content
	 * @param  Content $content
	 * @param  array   $values
	 * @return Content
	 */
	public function updateContent(ContentModel $content, array $values)
	{
		$content->title = $values['title'];
		$content->published = $values['published'];
        foreach($content->values as $value){
        	$data = $value->field->instance->storeValue($values[$value->field->machineName]);
        	$value->value = $data;
        	$value->save();
        }
        $content->save();
        return $content;
	}

	/**
	 * Creates a field value for a field on a content
	 * @param  Field   $field
	 * @param  Content $content
	 * @param  mixed  $value
	 * @return FieldValue
	 */
	public function createFieldValue(Field $field, ContentModel $content, $value)
	{
		$fieldValue = new FieldValue([
    		'value' => $field->instance->storeValue($value)
    	]);
    	$fieldValue->field()->associate($field);
    	$fieldValue->content()->associate($content);
    	$fieldValue->save();
    	return $fieldValue;
	}
}
