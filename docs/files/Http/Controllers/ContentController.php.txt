<?php

namespace Pingu\Content\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Pingu\Content\Entities\Content;
use Pingu\Content\Entities\ContentType;
use Pingu\Content\Events\ContentValidatorCreated;
use Pingu\Core\Http\Controllers\BaseController;
use Pingu\Forms\Fields\Boolean;
use Pingu\Forms\Fields\Text;
use Pingu\Forms\Form;
use Pingu\Jsgrid\Contracts\Controllers\JsGridContract;
use Pingu\Jsgrid\Traits\Controllers\JsGrid;

class ContentController extends BaseController implements JsGridContract
{
    use JsGrid;

    /**
     * @inheritDoc
     */
    public function getModel(): string
    {
        return Content::class;
    }

    /**
     * @inheritDoc
     */
    protected function canClick()
    {
        return true;
    }

    /**
     * @inheritDoc
     */
    protected function canDelete()
    {
        return true;
    }

    /**
     * @inheritDoc
     */
    protected function canEdit()
    {
        return true;
    }

    /**
     * @inheritDoc
     */
    public function index(Request $request)
    {
        $options['jsgrid'] = $this->buildJsGridView($request);
        $options['title'] = 'Content';
        $options['canSeeAddLink'] = false;
        $options['addLink'] = '';
        
        return view('pages.listModel-jsGrid', $options);
    }

    /**
     * Show the form for creating a new resource.
     * @return Response
     */
    public function create(Request $request, ContentType $type)
    {
        \Content::checkContentPermission('create', [$type]);

        $form = new Form(
            'create-content',
            ['url' => Content::transformAdminUri('store', [$type], true), 'method' => 'POST'],
            ['contentType' => $type],
            []
        );

        $field = new Field;
        $definitions = $field->getFieldDefinitions();
        foreach($field->getAddFormFields() as $field){
            $form->addField($field, $definitions[$field]);
        }

        foreach($type->fields as $field){
            $definition = [
                'type' => $field->instance->fieldType(),
                'label' => $field->name
            ];
            $definition = array_merge($field->instance->fieldDefinition(), $definition);
            $form->addField($field->machineName, $definition);
        }

        $form->addField('published',[
            'type' => Boolean::class
        ]);

        $form->end();

        return view('content::addContent')->with([
            'form' => $form,
            'title' => 'Add a '.$type->name,
            'contentType' => $type
        ]);
    }

    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Response
     */
    public function store(Request $request, ContentType $type)
    {
        $validator = $this->makeContentValidator($request, $type);
        $validator->validate();
        $validated = $validator->validated();

        $content = \Content::createContent($type, $validated);

        \Notify::success($type->name." '".$content->title."' has been created");

        return redirect(config('core.adminPrefix').'content');
    }

    /**
     * Show the form for creating a new resource.
     * @return Response
     */
    public function edit(Request $request, Content $content)
    {
        $type = $content->content_type;
        \Content::checkContentPermission('edit', [$type]);

        $form = new Form(
            'edit-content',
            ['url' => Content::transformAdminUri('update', [$content], true), 'method' => 'PUT'],
            ['contentType' => $type],
            ['title' => [
                'type' => Text::class,
                'required' => true,
                'default' => $content->title
                ]
            ]
        );

        foreach($content->values as $value){
            $field = $value->field;
            $definition = [
                'type' => $field->instance->fieldType(),
                'label' => $field->name,
                'default' => $field->instance->retrieveValue($value->value)
            ];
            $definition = array_merge($field->instance->fieldDefinition(), $definition);
            $form->addField($field->machineName, $definition);
        }

        $form->addField('published',[
            'type' => Boolean::class,
            'default' => $content->published
        ]);

        $form->end();

        return view('content::editContent')->with([
            'form' => $form,
            'title' => 'Edit '.$content->title,
            'contentType' => $type
        ]);
    }

    /**
     * Updates a content
     * @param Request $request
     * @return Response
     */
    public function update(Request $request, Content $content)
    {
        $validator = $this->makeContentValidator($request, $content->content_type);
        $validator->validate();
        $validated = $validator->validated();

        $content = \Content::updateContent($content, $validated);

        \Notify::success($content->title."' has been updated");

        return back();
    }

    /**
     * Make a validator for a content type content
     * @param  Request     $request
     * @param  ContentType $type
     * @return Validator
     */
    protected function makeContentValidator(Request $request, ContentType $type)
    {
        $rules = ['title' => 'required|string', 'published' => 'boolean'];
        $messages = ['title.required' => 'Title is required'];

        foreach($type->fields as $field){
            $rules[$field->machineName] = $field->instance->getFieldValidationRules();
            foreach($field->instance->getFieldValidationMessages() as $name => $message){
                $messages[$field->machineName.'.'.$name] = $message;
            }
        }

        $validator = \Validator::make($request->post(), $rules, $messages);
        event(new ContentValidatorCreated($validator, $type));

        return $validator;
    }

    /**
     * Show the specified resource.
     * @param int $id
     * @return Response
     */
    public function show($id)
    {
        return view('content::show');
    }

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Response
     */
    public function destroy($id)
    {
        //
    }
}

