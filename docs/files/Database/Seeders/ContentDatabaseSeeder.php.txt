<?php

namespace Pingu\Content\Database\Seeders;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Seeder;
use Pingu\Content\Entities\ContentField;
use Pingu\Content\Entities\ContentType;
use Pingu\Content\Entities\Field;
use Pingu\Content\Entities\Fields\FieldBoolean;
use Pingu\Content\Entities\Fields\FieldDatetime;
use Pingu\Content\Entities\Fields\FieldEmail;
use Pingu\Content\Entities\Fields\FieldFloat;
use Pingu\Content\Entities\Fields\FieldInteger;
use Pingu\Content\Entities\Fields\FieldText;
use Pingu\Content\Entities\Fields\FieldTextLong;
use Pingu\Content\Entities\Fields\FieldUrl;
use Pingu\Menu\Entities\Menu;
use Pingu\Menu\Entities\MenuItem;
use Pingu\Permissions\Entities\Permission;

class ContentDatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $menuItem = MenuItem::findByName('Content');

        if(!$menuItem){
            $viewContent = Permission::findOrCreate(['name' => 'view content','section' => 'Content']);
            $viewTypes = Permission::findOrCreate(['name' => 'view content types','section' => 'Content']);
            Permission::findOrCreate(['name' => 'add content types','section' => 'Content']);
            Permission::findOrCreate(['name' => 'edit content types','section' => 'Content']);
            Permission::findOrCreate(['name' => 'delete content types','section' => 'Content']);

            ContentField::create(['name' => 'Boolean', 'class' => FieldBoolean::class]);
            ContentField::create(['name' => 'Date time', 'class' => FieldDatetime::class]);
            ContentField::create(['name' => 'Email', 'class' => FieldEmail::class]);
            ContentField::create(['name' => 'Float', 'class' => FieldFloat::class]);
            ContentField::create(['name' => 'Integer', 'class' => FieldInteger::class]);
            ContentField::create(['name' => 'Text', 'class' => FieldText::class]);
            ContentField::create(['name' => 'Text (long)', 'class' => FieldTextLong::class]);
            ContentField::create(['name' => 'Url', 'class' => FieldUrl::class]);

            $menu = Menu::where(['machineName' => 'admin-menu'])->first();
            $content = MenuItem::create([
                'name' => 'Content',
                'url' => 'content.admin.content',
                'active' => 1,
                'permission_id' => $viewContent->id
            ], $menu);
            $structure = MenuItem::findByName('admin-menu.structure');
            MenuItem::create([
                'name' => 'Content types',
                'url' => 'content.admin.contentTypes',
                'active' => 1,
                'permission_id' => $viewTypes->id
            ], $menu, $structure);
            MenuItem::create([
                'name' => 'Create',
                'url' => '',
                'active' => 1,
            ], $menu, $content);

            $article = ContentType::create([
                'name'=>'Article', 
                'machineName' => 'article',
                'description' => 'A basic article with only content'
            ]);

            $content = FieldTextLong::create();
            $field = new Field([
                'name' => 'Content',
                'machineName' => 'content'
            ]);
            $field->content_type()->associate($article);
            $content->field()->save($field);
        }
    }
}

